# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.flow_spec import FlowSpec
from swagger_server.models.ipv4_addr import Ipv4Addr
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class QueryDesc(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, flow: FlowSpec=None, ingress_point: Ipv4Addr=None):
        """
        QueryDesc - a model defined in Swagger

        :param flow: The flow of this QueryDesc.
        :type flow: FlowSpec
        :param ingress_point: The ingress_point of this QueryDesc.
        :type ingress_point: Ipv4Addr
        """
        self.swagger_types = {
            'flow': FlowSpec,
            'ingress_point': Ipv4Addr
        }

        self.attribute_map = {
            'flow': 'flow',
            'ingress_point': 'ingress-point'
        }

        self._flow = flow
        self._ingress_point = ingress_point

    @classmethod
    def from_dict(cls, dikt) -> 'QueryDesc':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The QueryDesc of this QueryDesc.
        :rtype: QueryDesc
        """
        return deserialize_model(dikt, cls)

    @property
    def flow(self) -> FlowSpec:
        """
        Gets the flow of this QueryDesc.

        :return: The flow of this QueryDesc.
        :rtype: FlowSpec
        """
        return self._flow

    @flow.setter
    def flow(self, flow: FlowSpec):
        """
        Sets the flow of this QueryDesc.

        :param flow: The flow of this QueryDesc.
        :type flow: FlowSpec
        """
        if flow is None:
            raise ValueError("Invalid value for `flow`, must not be `None`")

        self._flow = flow

    @property
    def ingress_point(self) -> Ipv4Addr:
        """
        Gets the ingress_point of this QueryDesc.

        :return: The ingress_point of this QueryDesc.
        :rtype: Ipv4Addr
        """
        return self._ingress_point

    @ingress_point.setter
    def ingress_point(self, ingress_point: Ipv4Addr):
        """
        Sets the ingress_point of this QueryDesc.

        :param ingress_point: The ingress_point of this QueryDesc.
        :type ingress_point: Ipv4Addr
        """
        if ingress_point is None:
            raise ValueError("Invalid value for `ingress_point`, must not be `None`")

        self._ingress_point = ingress_point

