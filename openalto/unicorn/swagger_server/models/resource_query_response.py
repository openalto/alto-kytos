# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.resource_property import ResourceProperty
from swagger_server.models.vector_array import VectorArray
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class ResourceQueryResponse(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, ane_paths: VectorArray=None, ane_property: List[ResourceProperty]=None):
        """
        ResourceQueryResponse - a model defined in Swagger

        :param ane_paths: The ane_paths of this ResourceQueryResponse.
        :type ane_paths: VectorArray
        :param ane_property: The ane_property of this ResourceQueryResponse.
        :type ane_property: List[ResourceProperty]
        """
        self.swagger_types = {
            'ane_paths': VectorArray,
            'ane_property': List[ResourceProperty]
        }

        self.attribute_map = {
            'ane_paths': 'ane-paths',
            'ane_property': 'ane-property'
        }

        self._ane_paths = ane_paths
        self._ane_property = ane_property

    @classmethod
    def from_dict(cls, dikt) -> 'ResourceQueryResponse':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The ResourceQueryResponse of this ResourceQueryResponse.
        :rtype: ResourceQueryResponse
        """
        return deserialize_model(dikt, cls)

    @property
    def ane_paths(self) -> VectorArray:
        """
        Gets the ane_paths of this ResourceQueryResponse.

        :return: The ane_paths of this ResourceQueryResponse.
        :rtype: VectorArray
        """
        return self._ane_paths

    @ane_paths.setter
    def ane_paths(self, ane_paths: VectorArray):
        """
        Sets the ane_paths of this ResourceQueryResponse.

        :param ane_paths: The ane_paths of this ResourceQueryResponse.
        :type ane_paths: VectorArray
        """
        if ane_paths is None:
            raise ValueError("Invalid value for `ane_paths`, must not be `None`")

        self._ane_paths = ane_paths

    @property
    def ane_property(self) -> List[ResourceProperty]:
        """
        Gets the ane_property of this ResourceQueryResponse.

        :return: The ane_property of this ResourceQueryResponse.
        :rtype: List[ResourceProperty]
        """
        return self._ane_property

    @ane_property.setter
    def ane_property(self, ane_property: List[ResourceProperty]):
        """
        Sets the ane_property of this ResourceQueryResponse.

        :param ane_property: The ane_property of this ResourceQueryResponse.
        :type ane_property: List[ResourceProperty]
        """
        if ane_property is None:
            raise ValueError("Invalid value for `ane_property`, must not be `None`")

        self._ane_property = ane_property

