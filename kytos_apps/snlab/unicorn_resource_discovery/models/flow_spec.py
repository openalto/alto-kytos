# coding: utf-8

from __future__ import absolute_import
import re
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class FlowSpec(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, dst_ip: str=None, src_ip: str=None, src_port: int=None, dst_port: int=None, protocol: str=None):
        """
        FlowSpec - a model defined in Swagger

        :param dst_ip: The dst_ip of this FlowSpec.
        :type dst_ip: str
        :param src_ip: The src_ip of this FlowSpec.
        :type src_ip: str
        :param src_port: The src_port of this FlowSpec.
        :type src_port: int
        :param dst_port: The dst_port of this FlowSpec.
        :type dst_port: int
        :param protocol: The protocol of this FlowSpec.
        :type protocol: str
        """
        self.swagger_types = {
            'dst_ip': str,
            'src_ip': str,
            'src_port': int,
            'dst_port': int,
            'protocol': str
        }

        self.attribute_map = {
            'dst_ip': 'dstIP',
            'src_ip': 'srcIP',
            'src_port': 'srcPort',
            'dst_port': 'dstPort',
            'protocol': 'protocol'
        }

        self._dst_ip = dst_ip
        self._src_ip = src_ip
        self._src_port = src_port
        self._dst_port = dst_port
        self._protocol = protocol

    @classmethod
    def from_dict(cls, dikt) -> 'FlowSpec':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The FlowSpec of this FlowSpec.
        :rtype: FlowSpec
        """
        return deserialize_model(dikt, cls)

    @property
    def dst_ip(self) -> str:
        """
        Gets the dst_ip of this FlowSpec.

        :return: The dst_ip of this FlowSpec.
        :rtype: str
        """
        return self._dst_ip

    @dst_ip.setter
    def dst_ip(self, dst_ip: str):
        """
        Sets the dst_ip of this FlowSpec.

        :param dst_ip: The dst_ip of this FlowSpec.
        :type dst_ip: str
        """
        if dst_ip is None:
            raise ValueError("Invalid value for `dst_ip`, must not be `None`")
        if dst_ip is not None and not re.search('^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$', dst_ip):
            raise ValueError("Invalid value for `dst_ip`, must be a follow pattern or equal to `/^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))$/`")

        self._dst_ip = dst_ip

    @property
    def src_ip(self) -> str:
        """
        Gets the src_ip of this FlowSpec.

        :return: The src_ip of this FlowSpec.
        :rtype: str
        """
        return self._src_ip

    @src_ip.setter
    def src_ip(self, src_ip: str):
        """
        Sets the src_ip of this FlowSpec.

        :param src_ip: The src_ip of this FlowSpec.
        :type src_ip: str
        """
        if src_ip is not None and not re.search('^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|$', src_ip):
            raise ValueError("Invalid value for `src_ip`, must be a follow pattern or equal to `/^((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))|$/`")

        self._src_ip = src_ip

    @property
    def src_port(self) -> int:
        """
        Gets the src_port of this FlowSpec.

        :return: The src_port of this FlowSpec.
        :rtype: int
        """
        return self._src_port

    @src_port.setter
    def src_port(self, src_port: int):
        """
        Sets the src_port of this FlowSpec.

        :param src_port: The src_port of this FlowSpec.
        :type src_port: int
        """
        if src_port is not None and src_port > 65535:
            raise ValueError("Invalid value for `src_port`, must be a value less than or equal to `65535`")
        if src_port is not None and src_port < 0:
            raise ValueError("Invalid value for `src_port`, must be a value greater than or equal to `0`")

        self._src_port = src_port

    @property
    def dst_port(self) -> int:
        """
        Gets the dst_port of this FlowSpec.

        :return: The dst_port of this FlowSpec.
        :rtype: int
        """
        return self._dst_port

    @dst_port.setter
    def dst_port(self, dst_port: int):
        """
        Sets the dst_port of this FlowSpec.

        :param dst_port: The dst_port of this FlowSpec.
        :type dst_port: int
        """
        if dst_port is not None and dst_port > 65535:
            raise ValueError("Invalid value for `dst_port`, must be a value less than or equal to `65535`")
        if dst_port is not None and dst_port < 0:
            raise ValueError("Invalid value for `dst_port`, must be a value greater than or equal to `0`")

        self._dst_port = dst_port

    @property
    def protocol(self) -> str:
        """
        Gets the protocol of this FlowSpec.

        :return: The protocol of this FlowSpec.
        :rtype: str
        """
        return self._protocol

    @protocol.setter
    def protocol(self, protocol: str):
        """
        Sets the protocol of this FlowSpec.

        :param protocol: The protocol of this FlowSpec.
        :type protocol: str
        """

        self._protocol = protocol

